# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_wgs84')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_wgs84')
    _wgs84 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_wgs84', [dirname(__file__)])
        except ImportError:
            import _wgs84
            return _wgs84
        try:
            _mod = imp.load_module('_wgs84', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _wgs84 = swig_import_helper()
    del swig_import_helper
else:
    import _wgs84
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

WGS84_A = _wgs84.WGS84_A
WGS84_INVF = _wgs84.WGS84_INVF
WGS84_F = _wgs84.WGS84_F
WGS84_INVA = _wgs84.WGS84_INVA
WGS84_INVAA = _wgs84.WGS84_INVAA
WGS84_B = _wgs84.WGS84_B
WGS84_C = _wgs84.WGS84_C
WGS84_E = _wgs84.WGS84_E
WGS84_EE = _wgs84.WGS84_EE
WGS84_EED2 = _wgs84.WGS84_EED2
WGS84_EEEE = _wgs84.WGS84_EEEE
WGS84_EEEED4 = _wgs84.WGS84_EEEED4
WGS84_AADC = _wgs84.WGS84_AADC
WGS84_BBDCC = _wgs84.WGS84_BBDCC
WGS84_P1MEE = _wgs84.WGS84_P1MEE
WGS84_P1MEEDAA = _wgs84.WGS84_P1MEEDAA
WGS84_P1MEEDB = _wgs84.WGS84_P1MEEDB
WGS84_HMIN = _wgs84.WGS84_HMIN
WGS84_INVCBRT2 = _wgs84.WGS84_INVCBRT2
WGS84_INV3 = _wgs84.WGS84_INV3
WGS84_INV6 = _wgs84.WGS84_INV6
WGS84_D2R = _wgs84.WGS84_D2R
WGS84_R2D = _wgs84.WGS84_R2D
SPHERICAL_EARTH_RADIUS = _wgs84.SPHERICAL_EARTH_RADIUS
class ECEF(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ECEF, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ECEF, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _wgs84.ECEF_x_set
    __swig_getmethods__["x"] = _wgs84.ECEF_x_get
    if _newclass:
        x = _swig_property(_wgs84.ECEF_x_get, _wgs84.ECEF_x_set)
    __swig_setmethods__["y"] = _wgs84.ECEF_y_set
    __swig_getmethods__["y"] = _wgs84.ECEF_y_get
    if _newclass:
        y = _swig_property(_wgs84.ECEF_y_get, _wgs84.ECEF_y_set)
    __swig_setmethods__["z"] = _wgs84.ECEF_z_set
    __swig_getmethods__["z"] = _wgs84.ECEF_z_get
    if _newclass:
        z = _swig_property(_wgs84.ECEF_z_get, _wgs84.ECEF_z_set)

    def __init__(self):
        this = _wgs84.new_ECEF()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wgs84.delete_ECEF
    __del__ = lambda self: None
ECEF_swigregister = _wgs84.ECEF_swigregister
ECEF_swigregister(ECEF)

class WGS84(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WGS84, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WGS84, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lat"] = _wgs84.WGS84_lat_set
    __swig_getmethods__["lat"] = _wgs84.WGS84_lat_get
    if _newclass:
        lat = _swig_property(_wgs84.WGS84_lat_get, _wgs84.WGS84_lat_set)
    __swig_setmethods__["lon"] = _wgs84.WGS84_lon_set
    __swig_getmethods__["lon"] = _wgs84.WGS84_lon_get
    if _newclass:
        lon = _swig_property(_wgs84.WGS84_lon_get, _wgs84.WGS84_lon_set)
    __swig_setmethods__["alt"] = _wgs84.WGS84_alt_set
    __swig_getmethods__["alt"] = _wgs84.WGS84_alt_get
    if _newclass:
        alt = _swig_property(_wgs84.WGS84_alt_get, _wgs84.WGS84_alt_set)

    def __init__(self):
        this = _wgs84.new_WGS84()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wgs84.delete_WGS84
    __del__ = lambda self: None
WGS84_swigregister = _wgs84.WGS84_swigregister
WGS84_swigregister(WGS84)

class Spherical(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Spherical, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Spherical, name)
    __repr__ = _swig_repr
    __swig_setmethods__["alt"] = _wgs84.Spherical_alt_set
    __swig_getmethods__["alt"] = _wgs84.Spherical_alt_get
    if _newclass:
        alt = _swig_property(_wgs84.Spherical_alt_get, _wgs84.Spherical_alt_set)
    __swig_setmethods__["az"] = _wgs84.Spherical_az_set
    __swig_getmethods__["az"] = _wgs84.Spherical_az_get
    if _newclass:
        az = _swig_property(_wgs84.Spherical_az_get, _wgs84.Spherical_az_set)
    __swig_setmethods__["dist"] = _wgs84.Spherical_dist_set
    __swig_getmethods__["dist"] = _wgs84.Spherical_dist_get
    if _newclass:
        dist = _swig_property(_wgs84.Spherical_dist_get, _wgs84.Spherical_dist_set)

    def __init__(self):
        this = _wgs84.new_Spherical()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wgs84.delete_Spherical
    __del__ = lambda self: None
Spherical_swigregister = _wgs84.Spherical_swigregister
Spherical_swigregister(Spherical)


def wgs84_to_ecef(lat, lon, alt):
    return _wgs84.wgs84_to_ecef(lat, lon, alt)
wgs84_to_ecef = _wgs84.wgs84_to_ecef

def ecef_to_wgs84(x, y, z):
    return _wgs84.ecef_to_wgs84(x, y, z)
ecef_to_wgs84 = _wgs84.ecef_to_wgs84

def geodetic_to_ecef(lat, lon, alt):
    return _wgs84.geodetic_to_ecef(lat, lon, alt)
geodetic_to_ecef = _wgs84.geodetic_to_ecef

def ecef_to_geodetic(x, y, z):
    return _wgs84.ecef_to_geodetic(x, y, z)
ecef_to_geodetic = _wgs84.ecef_to_geodetic

def spherical_to_ecef(alt, az, dist):
    return _wgs84.spherical_to_ecef(alt, az, dist)
spherical_to_ecef = _wgs84.spherical_to_ecef

def ecef_to_spherical(x, y, z):
    return _wgs84.ecef_to_spherical(x, y, z)
ecef_to_spherical = _wgs84.ecef_to_spherical
# This file is compatible with both classic and new-style classes.


